# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from sailpoint.beta.models.date_compare_first_date import DateCompareFirstDate
from sailpoint.beta.models.date_compare_second_date import DateCompareSecondDate
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DateCompare(BaseModel):
    """
    DateCompare
    """ # noqa: E501
    first_date: DateCompareFirstDate = Field(alias="firstDate")
    second_date: DateCompareSecondDate = Field(alias="secondDate")
    operator: StrictStr = Field(description="This is the comparison to perform. | Operation | Description | | --------- | ------- | | LT        | Strictly less than: firstDate < secondDate | | LTE       | Less than or equal to: firstDate <= secondDate | | GT        | Strictly greater than: firstDate > secondDate | | GTE       | Greater than or equal to: firstDate >= secondDate | ")
    positive_condition: StrictStr = Field(description="The output of the transform if the expression evalutes to true", alias="positiveCondition")
    negative_condition: StrictStr = Field(description="The output of the transform if the expression evalutes to false", alias="negativeCondition")
    requires_periodic_refresh: Optional[StrictBool] = Field(default=False, description="A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process", alias="requiresPeriodicRefresh")
    input: Optional[Dict[str, Any]] = Field(default=None, description="This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.")
    __properties: ClassVar[List[str]] = ["firstDate", "secondDate", "operator", "positiveCondition", "negativeCondition", "requiresPeriodicRefresh", "input"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('LT', 'LTE', 'GT', 'GTE'):
            raise ValueError("must be one of enum values ('LT', 'LTE', 'GT', 'GTE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DateCompare from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_date
        if self.first_date:
            _dict['firstDate'] = self.first_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_date
        if self.second_date:
            _dict['secondDate'] = self.second_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DateCompare from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstDate": DateCompareFirstDate.from_dict(obj.get("firstDate")) if obj.get("firstDate") is not None else None,
            "secondDate": DateCompareSecondDate.from_dict(obj.get("secondDate")) if obj.get("secondDate") is not None else None,
            "operator": obj.get("operator"),
            "positiveCondition": obj.get("positiveCondition"),
            "negativeCondition": obj.get("negativeCondition"),
            "requiresPeriodicRefresh": obj.get("requiresPeriodicRefresh") if obj.get("requiresPeriodicRefresh") is not None else False,
            "input": obj.get("input")
        })
        return _obj


