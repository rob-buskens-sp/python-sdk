# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from sailpoint.v3.models.access_profile_document import AccessProfileDocument
from sailpoint.v3.models.account_activity_document import AccountActivityDocument
from sailpoint.v3.models.entitlement_document import EntitlementDocument
from sailpoint.v3.models.event_document import EventDocument
from sailpoint.v3.models.identity_document import IdentityDocument
from sailpoint.v3.models.role_document import RoleDocument
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

SEARCHDOCUMENT_ONE_OF_SCHEMAS = ["AccessProfileDocument", "AccountActivityDocument", "EntitlementDocument", "EventDocument", "IdentityDocument", "RoleDocument"]

class SearchDocument(BaseModel):
    """
    SearchDocument
    """
    # data type: AccessProfileDocument
    oneof_schema_1_validator: Optional[AccessProfileDocument] = None
    # data type: AccountActivityDocument
    oneof_schema_2_validator: Optional[AccountActivityDocument] = None
    # data type: EntitlementDocument
    oneof_schema_3_validator: Optional[EntitlementDocument] = None
    # data type: EventDocument
    oneof_schema_4_validator: Optional[EventDocument] = None
    # data type: IdentityDocument
    oneof_schema_5_validator: Optional[IdentityDocument] = None
    # data type: RoleDocument
    oneof_schema_6_validator: Optional[RoleDocument] = None
    actual_instance: Optional[Union[AccessProfileDocument, AccountActivityDocument, EntitlementDocument, EventDocument, IdentityDocument, RoleDocument]] = None
    one_of_schemas: List[str] = Literal["AccessProfileDocument", "AccountActivityDocument", "EntitlementDocument", "EventDocument", "IdentityDocument", "RoleDocument"]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SearchDocument.model_construct()
        error_messages = []
        match = 0
        # validate data type: AccessProfileDocument
        if not isinstance(v, AccessProfileDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccessProfileDocument`")
        else:
            match += 1
        # validate data type: AccountActivityDocument
        if not isinstance(v, AccountActivityDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccountActivityDocument`")
        else:
            match += 1
        # validate data type: EntitlementDocument
        if not isinstance(v, EntitlementDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EntitlementDocument`")
        else:
            match += 1
        # validate data type: EventDocument
        if not isinstance(v, EventDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventDocument`")
        else:
            match += 1
        # validate data type: IdentityDocument
        if not isinstance(v, IdentityDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentityDocument`")
        else:
            match += 1
        # validate data type: RoleDocument
        if not isinstance(v, RoleDocument):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RoleDocument`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SearchDocument with oneOf schemas: AccessProfileDocument, AccountActivityDocument, EntitlementDocument, EventDocument, IdentityDocument, RoleDocument. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SearchDocument with oneOf schemas: AccessProfileDocument, AccountActivityDocument, EntitlementDocument, EventDocument, IdentityDocument, RoleDocument. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("_type")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `_type` in the input.")

        # check if data type is `AccessProfileDocument`
        if _data_type == "accessprofile":
            instance.actual_instance = AccessProfileDocument.from_json(json_str)
            return instance

        # check if data type is `AccountActivityDocument`
        if _data_type == "accountactivity":
            instance.actual_instance = AccountActivityDocument.from_json(json_str)
            return instance

        # check if data type is `EntitlementDocument`
        if _data_type == "entitlement":
            instance.actual_instance = EntitlementDocument.from_json(json_str)
            return instance

        # check if data type is `EventDocument`
        if _data_type == "event":
            instance.actual_instance = EventDocument.from_json(json_str)
            return instance

        # check if data type is `IdentityDocument`
        if _data_type == "identity":
            instance.actual_instance = IdentityDocument.from_json(json_str)
            return instance

        # check if data type is `RoleDocument`
        if _data_type == "role":
            instance.actual_instance = RoleDocument.from_json(json_str)
            return instance

        # check if data type is `AccessProfileDocument`
        if _data_type == "AccessProfileDocument":
            instance.actual_instance = AccessProfileDocument.from_json(json_str)
            return instance

        # check if data type is `AccountActivityDocument`
        if _data_type == "AccountActivityDocument":
            instance.actual_instance = AccountActivityDocument.from_json(json_str)
            return instance

        # check if data type is `EntitlementDocument`
        if _data_type == "EntitlementDocument":
            instance.actual_instance = EntitlementDocument.from_json(json_str)
            return instance

        # check if data type is `EventDocument`
        if _data_type == "EventDocument":
            instance.actual_instance = EventDocument.from_json(json_str)
            return instance

        # check if data type is `IdentityDocument`
        if _data_type == "IdentityDocument":
            instance.actual_instance = IdentityDocument.from_json(json_str)
            return instance

        # check if data type is `RoleDocument`
        if _data_type == "RoleDocument":
            instance.actual_instance = RoleDocument.from_json(json_str)
            return instance

        # deserialize data into AccessProfileDocument
        try:
            instance.actual_instance = AccessProfileDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AccountActivityDocument
        try:
            instance.actual_instance = AccountActivityDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EntitlementDocument
        try:
            instance.actual_instance = EntitlementDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventDocument
        try:
            instance.actual_instance = EventDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdentityDocument
        try:
            instance.actual_instance = IdentityDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RoleDocument
        try:
            instance.actual_instance = RoleDocument.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SearchDocument with oneOf schemas: AccessProfileDocument, AccountActivityDocument, EntitlementDocument, EventDocument, IdentityDocument, RoleDocument. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SearchDocument with oneOf schemas: AccessProfileDocument, AccountActivityDocument, EntitlementDocument, EventDocument, IdentityDocument, RoleDocument. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


