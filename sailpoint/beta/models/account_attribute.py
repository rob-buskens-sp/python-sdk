# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AccountAttribute(BaseModel):
    """
    AccountAttribute
    """ # noqa: E501
    source_name: StrictStr = Field(description="A reference to the source to search for the account", alias="sourceName")
    attribute_name: StrictStr = Field(description="The name of the attribute on the account to return. This should match the name of the account attribute name visible in the user interface, or on the source schema.", alias="attributeName")
    account_sort_attribute: Optional[StrictStr] = Field(default='created', description="The value of this configuration is a string name of the attribute to use when determining the ordering of returned accounts when there are multiple entries", alias="accountSortAttribute")
    account_sort_descending: Optional[StrictBool] = Field(default=False, description="The value of this configuration is a boolean (true/false). Controls the order of the sort when there are multiple accounts. If not defined, the transform will default to false (ascending order)", alias="accountSortDescending")
    account_return_first_link: Optional[StrictBool] = Field(default=False, description="The value of this configuration is a boolean (true/false). Controls which account to source a value from for an attribute.  If this flag is set to true, the transform returns the value from the first account in the list, even if it is null. If it is set to false, the transform returns the first non-null value. If not defined, the transform will default to false", alias="accountReturnFirstLink")
    account_filter: Optional[StrictStr] = Field(default=None, description="This expression queries the database to narrow search results. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the database.  The default filter will always include the source and identity, and any subsequent expressions will be combined in an AND operation to the existing search criteria. Only certain searchable attributes are available:  - `nativeIdentity` - the Account ID  - `displayName` - the Account Name  - `entitlements` - a boolean value to determine if the account has entitlements", alias="accountFilter")
    account_property_filter: Optional[StrictStr] = Field(default=None, description="This expression is used to search and filter accounts in memory. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the returned resultset.  All account attributes are available for filtering as this operation is performed in memory.", alias="accountPropertyFilter")
    requires_periodic_refresh: Optional[StrictBool] = Field(default=False, description="A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process", alias="requiresPeriodicRefresh")
    input: Optional[Dict[str, Any]] = Field(default=None, description="This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.")
    __properties: ClassVar[List[str]] = ["sourceName", "attributeName", "accountSortAttribute", "accountSortDescending", "accountReturnFirstLink", "accountFilter", "accountPropertyFilter", "requiresPeriodicRefresh", "input"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccountAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AccountAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceName": obj.get("sourceName"),
            "attributeName": obj.get("attributeName"),
            "accountSortAttribute": obj.get("accountSortAttribute") if obj.get("accountSortAttribute") is not None else 'created',
            "accountSortDescending": obj.get("accountSortDescending") if obj.get("accountSortDescending") is not None else False,
            "accountReturnFirstLink": obj.get("accountReturnFirstLink") if obj.get("accountReturnFirstLink") is not None else False,
            "accountFilter": obj.get("accountFilter"),
            "accountPropertyFilter": obj.get("accountPropertyFilter"),
            "requiresPeriodicRefresh": obj.get("requiresPeriodicRefresh") if obj.get("requiresPeriodicRefresh") is not None else False,
            "input": obj.get("input")
        })
        return _obj


